use super::*;
use crate::mock::*;
use crate::mock::{new_tester, AccountId};
use crate::Error;
use crate::Pallet;
use frame_support::{assert_noop, assert_ok};
use fuso_support::constants::RESERVE_FOR_STAKING;
use fuso_support::constants::*;
use pallet_fuso_token::XToken;
use sp_keyring::AccountKeyring;
use sp_runtime::MultiAddress;
use codec::Decode;

type Token = pallet_fuso_token::Pallet<Test>;
type Verifier = Pallet<Test>;

#[test]
pub fn register_should_work() {
    new_tester().execute_with(|| {
        let alice: AccountId = AccountKeyring::Alice.into();
        let charlie: AccountId = AccountKeyring::Charlie.into();
        frame_system::Pallet::<Test>::set_block_number(15);
        assert_ok!(Verifier::register(
            Origin::signed(alice.clone()),
            b"cool".to_vec()
        ));
        let alice_dominator = Verifier::dominators(&alice);
        assert!(alice_dominator.is_some());
        assert_noop!(
            Verifier::register(Origin::signed(charlie.clone()), b"cool".to_vec()),
            Error::<Test>::InvalidName
        );
        assert_noop!(
            Verifier::register(Origin::signed(alice.clone()), b"cooq".to_vec()),
            Error::<Test>::DominatorAlreadyExists
        );
    });
}

#[test]
pub fn test_stake_unstake_should_work() {
    new_tester().execute_with(|| {
        let alice: AccountId = AccountKeyring::Alice.into();
        let ferdie: AccountId = AccountKeyring::Ferdie.into();
        let bob: AccountId = AccountKeyring::Bob.into();
        frame_system::Pallet::<Test>::set_block_number(15);
        assert_noop!(
            Verifier::stake(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                10000
            ),
            Error::<Test>::DominatorNotFound
        );
        assert_ok!(Verifier::register(
            Origin::signed(alice.clone()),
            b"cool".to_vec()
        ));

        //bob don't have enough TAO
        assert_noop!(
            Verifier::stake(
                Origin::signed(bob.clone()),
                MultiAddress::Id(alice.clone()),
                10000
            ),
            pallet_balances::Error::<Test>::InsufficientBalance
        );
        assert_ok!(Verifier::stake(
            Origin::signed(ferdie.clone()),
            MultiAddress::Id(alice.clone()),
            1000
        ));
        let alice_dominator: Dominator<u128, u32> = Verifier::dominators(&alice).unwrap();
        assert_eq!(alice_dominator.staked, 1000);
        assert_eq!(alice_dominator.status, DOMINATOR_INACTIVE);
        let reserves = Verifier::reserves(&(RESERVE_FOR_STAKING, ferdie.clone(), 0u32), &alice);
        assert_eq!(reserves, 1000);

        assert_ok!(Verifier::stake(
            Origin::signed(ferdie.clone()),
            MultiAddress::Id(alice.clone()),
            9000
        ));
        let alice_dominator: Dominator<u128, u32> = Verifier::dominators(&alice).unwrap();
        assert_eq!(alice_dominator.staked, 10000);
        assert_eq!(alice_dominator.status, DOMINATOR_ACTIVE);
        let reserves = Verifier::reserves(&(RESERVE_FOR_STAKING, ferdie.clone(), 0u32), &alice);
        assert_eq!(reserves, 10000);

        assert_noop!(
            //50 < MinimalStakingAmount(100)
            Verifier::stake(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                50
            ),
            Error::<Test>::LittleStakingAmount
        );
        let reserves = Verifier::reserves(&(RESERVE_FOR_STAKING, ferdie.clone(), 0u32), &alice);
        assert_eq!(reserves, 10000);
        assert_noop!(
            //10000-9990 < MinimalStakingAmount(100)
            Verifier::unstake(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                9990
            ),
            Error::<Test>::LittleStakingAmount
        );
        let reserves = Verifier::reserves(&(RESERVE_FOR_STAKING, ferdie.clone(), 0u32), &alice);
        assert_eq!(reserves, 10000);
        assert_ok!(Verifier::unstake(
            Origin::signed(ferdie.clone()),
            MultiAddress::Id(alice.clone()),
            9000
        ));
        let reserves = Verifier::reserves(&(RESERVE_FOR_STAKING, ferdie.clone(), 0u32), &alice);
        assert_eq!(reserves, 1000);
        assert_noop!(
            Verifier::unstake(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                5000
            ),
            Error::<Test>::InsufficientBalance
        );
        let alice_dominator: Dominator<u128, u32> = Verifier::dominators(&alice).unwrap();
        assert_eq!(alice_dominator.staked, 1000);
        assert_eq!(alice_dominator.status, DOMINATOR_INACTIVE);
    });
}

const ONE: u128 = 1000000000000000000;

#[test]
pub fn test_authorize() {
    new_tester().execute_with(|| {
        let alice: AccountId = AccountKeyring::Alice.into();
        let ferdie: AccountId = AccountKeyring::Ferdie.into();
        frame_system::Pallet::<Test>::set_block_number(15);
        assert_ok!(Token::issue(
            Origin::signed(ferdie.clone()),
            6,
            true,
            br#"USDT"#.to_vec(),
            br#"usdt.testnet"#.to_vec(),
        ));
        assert_ok!(Token::do_mint(1, &ferdie, 10000000, None));
        // assert_ok!(Token::issue(
        //     Origin::signed(ferdie.clone()),
        //     10000000000000000000,
        //     br#"USDT"#.to_vec()
        // ));
        let token_info = Token::get_token_info(1);
        assert!(token_info.is_some());
        let token_info: XToken<u128> = token_info.unwrap();
        match token_info {
            XToken::NEP141(_, _, total, _, _) => {
                assert_eq!(total, 10000000000000000000);
            }
        }
        assert_ok!(Verifier::register(
            Origin::signed(alice.clone()),
            b"cool".to_vec()
        ));
        assert_noop!(
            Verifier::authorize(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                1,
                500000000000
            ),
            Error::<Test>::DominatorInactive
        );
        assert_ok!(Verifier::stake(
            Origin::signed(ferdie.clone()),
            MultiAddress::Id(alice.clone()),
            10000
        ));
        assert_noop!(
            Verifier::authorize(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                1,
                5000000000000000000000000
            ),
            Error::<Test>::InsufficientBalance
        );
        let reserves = Verifier::reserves(&(RESERVE_FOR_AUTHORIZING, ferdie.clone(), 1u32), &alice);
        assert_eq!(reserves, 0);

        assert_noop!(
            Verifier::authorize(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                0,
                5000000000000000000000000
            ),
            Error::<Test>::InsufficientBalance
        );
        assert_ok!(Verifier::authorize(
            Origin::signed(ferdie.clone()),
            MultiAddress::Id(alice.clone()),
            1,
            100000
        ));
        let reserves = Verifier::reserves(
            &(RESERVE_FOR_AUTHORIZING_STASH, ferdie.clone(), 1u32),
            &alice,
        );
        assert_eq!(reserves, 100000);
        let t = Verifier::reserves(
            (RESERVE_FOR_AUTHORIZING_STASH, ferdie.clone(), 1),
            alice.clone(),
        );
        assert_eq!(t, 100000);
        assert_noop!(
            Verifier::authorize(
                Origin::signed(ferdie.clone()),
                MultiAddress::Id(alice.clone()),
                1,
                1000000
            ),
            Error::<Test>::ReceiptAlreadyExists
        );
        let t = Verifier::reserves(
            (RESERVE_FOR_AUTHORIZING_STASH, ferdie.clone(), 1),
            alice.clone(),
        );
        assert_eq!(t, 100000);
    });
}

#[test]
pub fn test_proof() {
        new_tester().execute_with(|| {
            let mut proof_raws = vec![
                "0100000000000000D43593C715FDD31C61141ABD04A99FD6822C8558854CCDE39A5684E7A56DA27D04001B000080F64AE1C7022D15049400D43593C715FDD31C61141ABD04A99FD6822C8558854CCDE39A5684E7A56DA27D000000000000000000000000000000000000000000000000000000000000000000000000000080F64AE1C7022D150000000000000000000000000000000000000000000000000C4C4F00D27A96327B015F5A3209C5CE271530808BFFA7CA815A87904459F7915D9F4341",

                "02000000000000008EAF04151687736326C9FEA17E25FC5287613693C912909CB226AA4794F26A4804001B000080F64AE1C7022D150494008EAF04151687736326C9FEA17E25FC5287613693C912909CB226AA4794F26A48000000000000000000000000000000000000000000000000000000000000000000000000000080F64AE1C7022D150000000000000000000000000000000000000000000000001D014C4FFE51FE0FBBBFF2F71BC27DBE7AD849B014D15ECE82549679A874A4B8C3502AEF04C895BA8D03A78B5756C19CACA83E72A62E409AFBEA0D85C176B9AAD1A06FCA7367334F0140CF0F6E3265B1177F618EBBAB545803C52DA7E4FBF398034DE3B5F9CDA43C8E",








                "0D000000000000008EAF04151687736326C9FEA17E25FC5287613693C912909CB226AA4794F26A48011300005E2C8CDD6389130000B2D3595BF0060000000414240100000000010000000000EE042CFC430F000000000000000000003EF1EE275E1A00000000000000000000EE042CFC430F00000000000000000000F0C448834E21000000000000000094008EAF04151687736326C9FEA17E25FC5287613693C912909CB226AA4794F26A480000000000000A54C3262B042D150000000000000000000000000000000000000000000000000A54C3262B042D150000000000000000000000000000000000000000000094008EAF04151687736326C9FEA17E25FC5287613693C912909CB226AA4794F26A48010000000000C49D322600F02B1500000000000000001921578B0A050100000000000000000095876C374EAB2B15000000000000000048371D7ABC490100000000000000240200000000010000000000E8890423C78A000000000000000000005E2C8CDD638900000000000000000000E8890423C78A000000000000000000005E2C8CDD638900000000000000006403000000000100000000005E2C8CDD638900000000000000000000000000000000000000000000000000003EF1EE275E1A0000000000000000000000000000000000000000000000000000F0C448834E21000000000000000001007D034C4FFA51FA54F553C68533B170501813FCAC0EBE6118ACB3B4B106D651BA7B667FFCEDE5580749A4EC0F796A2D60694F10D88FFE0F5D0F806C9805B3D7903C69348F9B60004F024C4FFD484C4FF84C4FF8484F0451FD0F687631A548FF0153E0BB017948A891A81D6BD6B0DD053A1B18439E6C5FD685BA8D03A78B5756C19CACA83E72A62E409AFBEA0D85C176B9AAD1A06FCA736713484C4FFB51FB0E16B6DFBD8980B12C50B62E1EC7C58C4D8948309D35149F0E4AA20DF8251930A19639973A8640009A8A7AD562BEEA03DA2989721B848B1E9F11AFF7FED8AE034F034817F57BBAD1D51C2529EDD4BBBF854D2DEEDD05A2EDBABBBA5C5213739ACE8114",







            ];
            let proofs: Vec<Proof<AccountId>> = proof_raws.iter_mut()
                .map(|proof|
                    Proof::decode(&mut hex::decode(proof.as_bytes()).unwrap().as_slice()).unwrap()
                ).collect();
            assert_eq!(proofs.len(), 19);
        });
}
